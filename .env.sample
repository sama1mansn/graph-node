############################### DEFAULT #####################################
# Chain ID
CHAIN_ID=167005

# Exposed ports
PORT_L2_EXECUTION_ENGINE_HTTP=8547
PORT_L2_EXECUTION_ENGINE_WS=8548
PORT_L2_EXECUTION_ENGINE_METRICS=6060
PORT_L2_EXECUTION_ENGINE_P2P=f325435
PORT_PROMETHEUS=9091
PORT_GRAFANA=3001

# Comma separated L2 execution engine bootnode URLs for P2P discovery bootstrap
BOOT_NODES=enode://77310934db4b38255ea172c9c770cdf69da2090a542d840569a863760ce415837a8fb310d52070a3ee9c4a665008c677cfc3b8c0850e8b40e2ab0b5006f31de4@43.153.67.131:30303,enode://5751376186499ec96d01554785183005a4fa5f1022d750c684d3925b03185a344ef42652430739fba998408bbdf13e3200a096b15196764aabd4bcaa4e941232@49.51.71.216:30303,enode://5ab86d28b1d3488163d6f401dd914f2d49f4f7cfd7fa48a12871ce2caea5c4693bf22366da4a7fc741704bf0e46e159bb3cb0fe0257453ff576ed91c409e050a@170.106.116.179:30303,enode://4efd43b7fef961cb3853dbafa89f07406ad59e3b4fb9e01bd2e191da0350af2c1714ce968249fc240036c6b4969282c7d28b90300ac687e5e034cad83110612c@35.192.136.10:30303,enode://519eb790453d85b570061b18b4f02d5c251e1af6e37f237e19d8827aabaa51ded0b3fc0272fbcdb7ebbb4f81216f2728210772d673d704d57773164dabc55fe6@34.136.126.66:30303,enode://8dbdd915aeced3b4bbd4c7f761b9bc9c5ee4aadf52a2bc00473b80a3ef5f5b01189bda589b9081f7ccde427296e5ce13c3a7079a797e151546882f6747ea2ca7@35.226.15.64:30303

# Taiko protocol contract addresses
TAIKO_L1_ADDRESS=0x6375394335f34848b850114b66A49D6F47f2cdA8
TAIKO_L2_ADDRESS=0x1000777700000000000000000000000000000001

# P2P
DISABLE_P2P_SYNC=false

############################### REQUIRED #####################################
# L1 Sepolia RPC endpoints (you will need an RPC provider such as Infura or Alchemy, or run a full Sepolia node yourself)
# If you are using a local Sepolia L1 node, you can refer to it as "http://host.docker.internal:8545" and "ws://host.docker.internal:8546", which refer to the default ports in the .env for an eth-docker L1 node.
# However, you may need to add this host to docker-compose.yml. If that does not work, you can try the private local ip address (e.g. http:/192.168.1.15:8545). You can find that with `ip addr show` or a similar command.
L1_ENDPOINT_HTTP=
L1_ENDPOINT_WS=

############################### OPTIONAL #####################################
# If you want to be a prover who generates and submits zero knowledge proofs of proposed L2 blocks, you need to change
# `ENABLE_PROVER` to true and set `L1_PROVER_PRIVATE_KEY`.
ENABLE_PROVER=false
# How many provers you want to run concurrently, note that each prover will cost ~8 cores / ~16 GB memory.
ZKEVM_CHAIN_INSTANCES_NUM=1
# A L1 account (with balance) private key which will send the TaikoL1.proveBlock transactions.
# WARNING: only use a test account, pasting your private key in plain text here is not secure.
L1_PROVER_PRIVATE_KEY=
# Gas limit for proveBlock transactions (in gas)
PROVE_BLOCK_TX_GAS_LIMIT=1000000

# If you want to be a proposer who proposes L2 execution engine's transactions in mempool to Taiko L1 protocol
# contract (be a "mining L2 node"), you need to change `ENABLE_PROPOSER` to true, then fill `L1_PROPOSER_PRIVATE_KEY`
# and `L2_SUGGESTED_FEE_RECIPIENT`
ENABLE_PROPOSER=false
# A L1 account (with balance) private key who will send TaikoL1.proposeBlock transactions
L1_PROPOSER_PRIVATE_KEY=
# A L2 account address who will be the tx fee beneficiary of the L2 blocks that you proposed
L2_SUGGESTED_FEE_RECIPIENT=
# Gas limit for proposeBlock transactions (in gas)
PROPOSE_BLOCK_TX_GAS_LIMIT=800000
# Maximum gas tip used for proposeBlock transactions (in wei)
PROPOSE_BLOCK_TX_GAS_TIP_CAP=10000000000

# Comma-delimited local tx pool addresses you want to prioritize, useful to set your proposer to only propose blocks with your prover's transactions
TXPOOL_LOCALS=

# Timeout when waiting for a propose or prove block transaction receipt to be seen, in seconds
WAIT_RECEIPT_TIMEOUT=360
